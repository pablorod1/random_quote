---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import LinkIcon from "../icons/LinkIcon.astro";
import RegroupIcon from "../icons/RegroupIcon.astro";
const getQuote = async () => {
  const response = await fetch("https://api.quotable.io/random");
  const data = await response.json();
  return data;
};

const initialData = await getQuote();
const { author, content, tags } = initialData;
---

<Layout title="Welcome to Astro.">
  <main>
    <Card author={author} content={content} tags={tags} />

    <div
      class="flex items-center justify-center
    mt-6
    rounded-xl border-2 border-[#4a556776]"
    >
      <button id="update-quote-button" type="button" class="border-r border-[#4a556776] py-2 px-3"
        ><RegroupIcon class="w-8 h-8" /></button
      >
      <button id="copy-quote-button" type="button" class="border-l border-[#4a556776] py-2 px-3"
        ><LinkIcon class="w-8 h-8" /></button
      >
    </div>
  </main>
</Layout>

<style>
  main {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
</style>

<script>
  async function updateQuote() {
    const response = await fetch('https://api.quotable.io/random');
    const data = await response.json();
    
    const quoteAuthorElement = document.getElementById('quote-author');
    if (quoteAuthorElement !== null) {
      quoteAuthorElement.innerText = data.author;
    }
    const quoteContentElement = document.getElementById('quote-content');
    if (quoteContentElement !== null) {
      quoteContentElement.innerText = data.content;
    }
    
    const tagsContainer = document.getElementById('quote-tags');
    if (tagsContainer !== null) {
      tagsContainer.innerHTML = '';
    }
    data.tags.forEach((tag: string) => {
      const span = document.createElement('span');
      span.className = 'bg-transparent border-[1px] border-[#6466E9] rounded-full py-1 px-3 text-[#6466E9] text-[10px]';
      span.innerText = tag;
      if (tagsContainer !== null) {
        tagsContainer.appendChild(span);
      }
    });
  }

  function copyQuoteToClipboard() {
    const quoteContentElement = document.getElementById('quote-content');
    if (quoteContentElement !== null) {
      const quoteText = quoteContentElement.innerText;
      navigator.clipboard.writeText(quoteText).then(() => {
        alert('Quote copied to clipboard!');
      }).catch(err => {
        console.error('Failed to copy text: ', err);
      });
    }
  }

  const updateQuoteButton = document.getElementById('update-quote-button');
  if (updateQuoteButton !== null) {
    updateQuoteButton.addEventListener('click', updateQuote);
  }

  const copyQuoteButton = document.getElementById('copy-quote-button');
  if (copyQuoteButton !== null) {
    copyQuoteButton.addEventListener('click', copyQuoteToClipboard);
  }
</script>